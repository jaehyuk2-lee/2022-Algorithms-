//2022-12-20 code 6.2 to C
//n개의 원소중 r개를 고르는 모든 경우의 출력 ~> 조합
//배열에 입력한 수 만큼 할당 받아야하므로 동적할당 사용
#include <stdio.h>
#include <stdlib.h>

void Combination(int *ary, int *chosen, int n, int r, int c);
void print(int *chosen, int c);

int main(){
    int n,r,c;
    printf("원소의 개수 입력: ");
    scanf("%d", &n);
    printf("고를 개수 입력: ");
    scanf("%d", &r);
    
    c=r;//현재 인덱스의 값
    
    int *ary;
    ary=(int*)malloc(n*sizeof(int));
    //n개의 배열 할당
    
    for(int i=0; i<n; i++){
        ary[i]=i;
    }//배열 입력
    
    int *chosen;
    chosen=(int*)malloc(r*sizeof(int));
    //r개를 선택할 배열 할당;
    
    Combination(ary, chosen, n, r, c);
    free(ary);
    free(chosen); //동적할당 해제
}

void print(int *chosen, int c){
    for(int i=0; i<c; i++){
        printf("%d ", chosen[i]);
    }
    printf("\n");
}

void Combination(int *ary, int *chosen, int n, int r, int c){
    if(r==0){
        print(chosen, c);
        return;
    }//r==0 이면 모두 선택 했기 때문에 출력
    
    if(n<r){
        return;
    }//총 개수 보다 많은 선택을 할 수는 없다
     //더 이상 제외할 수 없으니다른 경우 진행
    
    else{
        chosen[r-1]=ary[n-1];//제일 마지막에 들어올 수 저장
        Combination(ary, chosen, n-1, r-1, c);
        //n개 중에서 한개를 뽑고 다음 순서로 실행
        Combination(ary, chosen, n-1, r, c);
        //n개 중에서 r번째를 제외하고 다음 순서로 진행
        //총 r개 뽑는 것은 동일
    }//else if(n>=r)
}


//https://iyk2h.tistory.com/82
